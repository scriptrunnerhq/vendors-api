module.exports = {
  root: true,
  parser: "@typescript-eslint/parser",
  env: {
    browser: true,
    node: true,
  },
  extends: ["eslint:recommended", "prettier"],
  plugins: [
    "eslint-plugin-import",
    "eslint-plugin-prefer-arrow",
    "eslint-plugin-unicorn",
    "unused-imports",
    "testing-library",
    "prettier",
  ],
  overrides: [
    {
      files: ["**/?(*.)+(test)\\.[jt]s?(x)"],
      extends: ["plugin:testing-library/react"],
    },

    {
      files: ["**/*.ts", "**/*.tsx"],
      extends: ["plugin:@typescript-eslint/recommended", "prettier"],
      plugins: ["@typescript-eslint"],
      rules: {
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/ban-ts-comment": "warn",
        "@typescript-eslint/consistent-type-imports": "error",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/prefer-namespace-keyword": "off",
        "@typescript-eslint/no-unused-vars": [
          "error",
          { argsIgnorePattern: "^_", varsIgnorePattern: "^_" },
        ],
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "off",
        "@typescript-eslint/ban-types": [
          "error",
          {
            types: {
              /* eslint-disable id-denylist */
              /* (disabling rule due to Prettier removing quotes from object keys in ban-types) */
              Object: {
                message:
                  "Avoid using the `Object` type. Did you mean `object`?",
              },
              Function: {
                message:
                  "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
              },
              Boolean: {
                message:
                  "Avoid using the `Boolean` type. Did you mean `boolean`?",
              },
              Number: {
                message:
                  "Avoid using the `Number` type. Did you mean `number`?",
              },
              String: {
                message:
                  "Avoid using the `String` type. Did you mean `string`?",
              },
              Symbol: {
                message:
                  "Avoid using the `Symbol` type. Did you mean `symbol`?",
              },
            },
          },
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-member-accessibility": [
          "off",
          {
            accessibility: "explicit",
          },
        ],
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/member-delimiter-style": [
          "off",
          {
            multiline: {
              delimiter: "none",
              requireLast: true,
            },
            singleline: {
              delimiter: "semi",
              requireLast: false,
            },
          },
        ],
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/naming-convention": [
          "off",
          {
            selector: "variable",
            format: ["camelCase", "UPPER_CASE", "PascalCase"],
            leadingUnderscore: "allow",
            trailingUnderscore: "forbid",
          },
        ],
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-shadow": [
          "off",
          {
            hoist: "all",
          },
        ],
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/quotes": "off",
        "@typescript-eslint/semi": ["off", null],
        "@typescript-eslint/triple-slash-reference": [
          "off",
          {
            path: "always",
            types: "prefer-import",
            lib: "always",
          },
        ],
        "@typescript-eslint/type-annotation-spacing": "off",
        "@typescript-eslint/typedef": "off",
        "@typescript-eslint/unified-signatures": "error",
        "no-restricted-syntax": [
          "error",
          {
            selector: "VariableDeclaration[kind='var'][declare!=true]",
            message: "Unexpected var, use let or const instead.",
          },
        ],
        eqeqeq: ["error", "smart"],
        "no-bitwise": "error",
        "no-redeclare": "error",
        "no-sparse-arrays": "error",
        "no-throw-literal": "error",
        "object-shorthand": "error",
        "one-var": ["error", "never"],
        "prefer-arrow/prefer-arrow-functions": [
          "error",
          { singleReturnOnly: true },
        ],
      },
    },
  ],
  rules: {
    "react/jsx-key": "off",
    "prettier/prettier": "error",
    "no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "arrow-parens": ["off", "always"],
    "brace-style": ["off", "off"],
    "comma-dangle": "off",
    complexity: "off",
    "constructor-super": "error",
    "dot-notation": "off",
    "eol-last": "off",
    eqeqeq: ["error", "smart"],
    "guard-for-in": "error",
    "id-denylist": [
      "error",
      "any",
      "Number",
      "number",
      "String",
      "string",
      "Boolean",
      "boolean",
      "Undefined",
      "undefined",
    ],
    "id-match": "error",
    "import/no-extraneous-dependencies": "off",
    "import/no-internal-modules": "off",
    "import/order": "off",
    indent: "off",
    "linebreak-style": "off",
    "max-classes-per-file": "off",
    "max-len": "off",
    "new-parens": "off",
    "newline-per-chained-call": "off",
    "no-alert": "error",
    "no-case-declarations": "off",
    "no-shadow-restricted-names": "error",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-console": "off",
    "no-debugger": "error",
    "no-duplicate-case": "error",
    "no-duplicate-imports": "off",
    "no-empty": ["error", { allowEmptyCatch: true }],
    "no-empty-function": "off",
    "no-eval": "error",
    "no-extra-bind": "error",
    "no-extra-semi": "off",
    "no-fallthrough": "error",
    "no-invalid-this": "off",
    "no-irregular-whitespace": ["error", { skipComments: true }],
    "no-multiple-empty-lines": "off",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-redeclare": "error",
    "no-return-await": "error",
    "no-sequences": "error",
    "no-shadow": "off",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "off",
    "no-undef": "off",
    "no-undef-init": "error",
    "no-useless-concat": "error",
    "no-useless-escape": "error",
    "no-useless-return": "error",
    "no-underscore-dangle": "off",
    "no-unsafe-finally": "error",
    "no-unused-expressions": "error",
    "no-unused-labels": "error",
    "no-use-before-define": "off",
    "no-var": "error",
    "object-shorthand": "error",
    "one-var": ["error", "never"],
    "padded-blocks": [
      "off",
      {
        blocks: "never",
      },
      {
        allowSingleLineBlocks: true,
      },
    ],
    "prefer-arrow/prefer-arrow-functions": "error",
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-destructuring": "error",
    "prefer-template": "error",
    "prefer-object-spread": "error",
    "quote-props": "off",
    quotes: "off",
    radix: "error",
    "react/jsx-curly-spacing": "off",
    "react/jsx-equals-spacing": "off",
    "react/jsx-tag-spacing": [
      "off",
      {
        afterOpening: "allow",
        closingSlash: "allow",
      },
    ],
    "react/jsx-wrap-multilines": "off",
    semi: "off",
    "space-before-function-paren": "off",
    "space-in-parens": ["off", "never"],
    "unicorn/prefer-ternary": "error",
    "use-isnan": "error",
    "valid-typeof": "off",
  },
};
